# HiMMP Website Development Plan

## Project Overview

The Heaviness in Metal Music Production (HiMMP) website requires a custom-built solution to replace the existing Squarespace implementation. This academic research website contains multiple content sections, embedded media, and downloadable resources. 

## Directory Structure

```
himmp-website/
├── index.html                  # Home page
├── about.html                  # About page
├── approach.html               # Research approach page
├── team.html                   # Team page
├── publications.html           # Publications page
├── videos.html                 # Videos page
├── downloads-resources.html    # Downloads page
├── contact.html                # Contact page
├── assets/
│   ├── css/
│   │   ├── main.css            # Main stylesheet
│   │   ├── normalize.css       # CSS reset/normalize
│   │   └── responsive.css      # Responsive design rules
│   ├── js/
│   │   ├── main.js             # Main JavaScript file
│   │   ├── audio-player.js     # Custom audio player functionality
│   │   └── form-handler.js     # Contact form handling
│   ├── images/
│   │   ├── logo.png            # HiMMP logo
│   │   ├── team/               # Team member photos
│   │   └── backgrounds/        # Background images
│   ├── audio/                  # Audio samples
│   └── docs/                   # PDF and other documents
└── README.md                   # Project documentation
```

## Core Technologies

- **HTML5**: Semantic markup for content structure
- **CSS3**: Styling with modern CSS features
- **JavaScript**: Client-side interactivity
- **Responsive Design**: Mobile-first approach for all device sizes
- **Vanilla Implementation**: No frameworks or libraries except where essential

## Key Components

### 1. Navigation

The site requires a consistent navigation system across all pages with the following menu items:
- Welcome (Home)
- About
- Approach
- Team
- Publications
- Videos
- Listen & Download
- Updates (if needed)
- Contact

### 2. Audio Player

A custom audio player for the "Listen & Download" page that allows visitors to:
- Play/pause audio clips
- Toggle between different producer mixes
- Display track information
- Show visual waveform (optional)

### 3. Video Embedding

The Videos page requires embedding YouTube videos with a consistent, responsive layout.

### 4. Contact Form

A contact form that can be connected to a serverless function or email forwarding service to handle submissions.

### 5. Publications Display

A structured layout for displaying academic publications, with appropriate formatting for citations.

### 6. Responsive Image Gallery

For team members and possibly other visual content.

## Implementation Plan

### Phase 1: Core Structure and Design

1. Create HTML templates for all pages
2. Implement base CSS styling
3. Develop navigation and shared components
4. Set up responsive design framework

### Phase 2: Content Integration

1. Populate all pages with content from PDFs
2. Format text content properly
3. Optimize and integrate images
4. Structure publication listings

### Phase 3: Interactive Elements

1. Implement audio player functionality
2. Set up video embedding
3. Create contact form with validation
4. Add any necessary animations or transitions

### Phase 4: Testing and Deployment

1. Cross-browser testing
2. Mobile/responsive testing
3. Performance optimization
4. Accessibility review
5. Deployment to hosting service

## Hosting Considerations

For an academic research website, consider these hosting options:

1. **University Hosting**: Check if University of Huddersfield provides hosting for research projects
2. **GitHub Pages**: Free, reliable hosting for static websites
3. **Netlify/Vercel**: Modern hosting platforms with free tiers and serverless function support
4. **Traditional Hosting**: Standard hosting providers if more control is needed

## Maintenance Strategy

Without a CMS, content updates will require direct HTML editing. Consider implementing:

1. Modular HTML structure with reusable components
2. Well-commented code
3. Documentation for common update procedures
4. Potential implementation of a simple "mini CMS" using JSON data files for frequently updated content
